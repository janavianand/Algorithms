/*
Given a string s and an integer k, return the number of substrings in s of length k with no repeated characters.

 

Example 1:

Input: s = "havefunonleetcode", k = 5
Output: 6
Explanation: There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.
Example 2:

Input: s = "home", k = 5
Output: 0
Explanation: Notice k can be larger than the length of s. In this case, it is not possible to find any substring.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.
1 <= k <= 104

*/

// Approach 1 

/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var numKLenSubstrNoRepeats = function(s, k) {
    if(!s) return 0
    let hash = {}
    let result = 0

    for(let i=0;i<s.length;i++){
        let j=i+1
        hash[s[i]] = true
        let count = 1
        while(j<s.length && count < k){
            if(!hash[s[j]]){
                hash[s[j]]=true
                count += 1
            }else{
                break
            }

            j += 1
        }

        hash = {}
        if(count === k){
            result += 1
        }
        count = 1
    }

    return result
};

// Approach 2

/**
 * @param {string} s
 * @param {number} k
 * @return {number}
 */
var numKLenSubstrNoRepeats = function(s, k) {
    if(!s) return 0
    if(k===1) return s.length
    let hash = {}
    let result = 0
    let i=0
    let j=1

    while(j<s.length && i<=j){
        hash[s[i]] = true
        while(j<s.length && j-i < k){
            if(!hash[s[j]]){
                hash[s[j]]=true
            }else{
                while(hash[s[j]] && i<=j){
                    delete hash[s[i]]
                    i += 1
                }
                hash[s[j]] = true
            }

            j += 1
        }

        if(Object.keys(hash).length === k){
            result += 1
            delete hash[s[i]]
        }
        i+=1
    }

    return result
};
